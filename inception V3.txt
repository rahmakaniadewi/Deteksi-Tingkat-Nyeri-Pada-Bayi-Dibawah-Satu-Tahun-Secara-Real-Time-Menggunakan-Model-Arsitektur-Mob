import numpy as np 
import pandas as pd 
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, ZeroPadding2D,\
     Flatten, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D, Dense, Activation, Add 
from tensorflow.keras.models import Model
from tensorflow.keras import activations
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.regularizers import l2
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
import numpy as np
import shutil
import cv2

print(tf.__version__)

from google.colab import drive
drive.mount('/content/drive')

import pathlib
data_dir = pathlib.Path('/content/drive/MyDrive/Skripsi')

image_count = len(list(data_dir.glob('*/*.png')))
print(image_count)

size = 224
batch_size = 50
train_datagen = ImageDataGenerator( 
    zca_epsilon=1e-06,
    rotation_range=30, 
    width_shift_range=0.2,
    height_shift_range=0.2, 
    brightness_range=[0.5,1.5],  
    zoom_range=0.2,
    horizontal_flip=True, 
    rescale=1/255,
    preprocessing_function=None, 
    data_format=None, 
    validation_split=0.2, 
    dtype=None
) # set validation split

train_generator = train_datagen.flow_from_directory( 
    data_dir,
    target_size=(size, size),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training') 

validation_generator = train_datagen.flow_from_directory(
    data_dir, 
    target_size=(size, size),
    batch_size= batch_size,
    class_mode='categorical',
    shuffle = False,
    subset='validation')

learning_rate = 1e-6
epochs = 50

inception_v3_layer = tf.keras.applications.inception_v3(
    include_top=False,
    weights="imagenet",
    input_shape=(size,size,3),
    pooling='avg',
)
inception_v3_layer.trainable = True

model = tf.keras.Sequential([
        inception_v3_layer,
        tf.keras.layers.Dense(4, activation = "softmax")],
        name = "inception_v3")

model.compile(optimizer = tf.keras.optimizers.legacy.Adam(learning_rate = learning_rate, decay = learning_rate / epochs),
                  loss = "categorical_crossentropy",
                  metrics = ["accuracy"])

model.summary()

early_stopping = tf.keras.callbacks.EarlyStopping(monitor="val_loss", min_delta = 1e-3, patience=7, mode = 'auto',  restore_best_weights=True)
filepath = '/content/drive/MyDrive/Skripsi/weights.{epoch:02d}-{val_loss:.2f}.hdf5'
model_checkpoint = tf.keras.callbacks.ModelCheckpoint(
    filepath, monitor='val_loss', verbose=1, save_best_only=True,
    save_weights_only=True, mode='min', save_freq='epoch'
)

history = model.fit(train_generator,
                   steps_per_epoch = train_generator.samples // batch_size, 
                   validation_data = validation_generator,
                   validation_steps = validation_generator.samples // batch_size,
                   epochs = epochs,
#                   callbacks = [early_stopping, model_checkpoint]
                   )

# Plotting train_loss vs val_loss
plt.figure(figsize = (10, 5))
plt.plot(history.history["loss"], label = "loss")
plt.plot(history.history["val_loss"], label = "val_loss")
plt.title("Training Loss and Validation Loss on COVID-19 Dataset")
plt.xlabel("Epoch")
plt.ylabel("Training/Validation Loss")
plt.legend()

# Plotting train_accuracy vs Val_accuracy
plt.figure(figsize = (10, 5))
plt.plot(history.history["accuracy"], label = "accuracy")
plt.plot(history.history["val_accuracy"], label = "val_accuracy")
plt.title("Training Accuracy and Validation Accuracy on COVID-19 Dataset")
plt.xlabel("Epoch")
plt.ylabel("Training/Validation Accuracy")
plt.legend(loc = "upper left")

#Prediction:
target_names = ["COVID", "Normal","Lung Opacity", "Viral Pneumonia"]
predict = model.predict(validation_generator)
predict = np.argmax(predict, axis=1)
    
print("Confusion Matrix")
cm = confusion_matrix(validation_generator.classes, predict)
print(cm)
    
print("Classification Report")
print(classification_report(validation_generator.classes, predict, target_names = target_names))

model.evaluate(train_generator)